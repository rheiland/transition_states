%!PS-Adobe-
%%DocumentFonts: Courier Courier-Bold
% PSP prologue file, version 1.0
%
% Copyright (c) 1989 Eric J. Kostelich
%
save
/PSPstart {} def
/p {	3 1 roll
	Linespacing mul Textoffset exch sub
	exch Textwidth Leftmargin add mul Leftmargin add
	exch moveto show 
} def

/Setbold { /Courier-Bold findfont Boldsize scalefont setfont } def
/SF { /Courier findfont Pointsize scalefont setfont } def
%
% (string) H  - for placing boldface titles
%
/H { Setbold Leftmargin Titleoffset moveto show SF } def
%
%  Normal mode - use titles, 54 lines/page
%
/Usual {/Leftmargin 66 def  /Textoffset 708 def /Titleoffset 738 def
	/Boldsize 12 def  /Pointsize 10 def /Linespacing 12 def
	/Textwidth 480 def /Rotatemode false def
} def
%
%  Plain mode - no titles, 66 lines/page
%
/Plain {/Leftmargin 72 def  /Textoffset 756 def
	/Boldsize 14 def  /Pointsize 9 def /Linespacing 11 def
	/Textwidth 480 def /Rotatemode false def
} def
%
% Rotated, two-column mode - 65 lines/column
%
/Rotated { /Rotatemode true def } def
/Rotatepage { 612 0 translate 90 rotate
	/Leftmargin 36 def /Textoffset 550 def /Titleoffset 568 def
	/Boldsize 12 def  /Pointsize 7 def  /Linespacing 8 def
	/Textwidth 336 def
} def
/Startpage { Rotatemode {Rotatepage} if SF } def
/Endpage {showpage} def
/PSPend {restore} def
%%EndPrologue
Rotated
%%Page 1 1
Startpage
(/Users/heiland/git/stem_cells/custom_modules/custom_paul.cpp      Fri Jan 17 13:31:06 2020
       1)H
0 0(#include "./custom.h")p
0 2(// declare cell definitions here)p
0 4(Cell_Definition CSC;)p
0 5(Cell_Definition DCC;)p
0 7(// temp for testing)p
0 8(int diff_count = 0;)p
0 9(int div_count = 0;)p
0 11(void differentiation_function\( Cell* pCell, Phenotype& phenotype, double dt \))p
0 12({)p
0 13(        // am I at the start of a cycle?)p
0 14(        if\( phenotype.cycle.data.elapsed_time_in_phase < 0.1 \))p
0 15(        {)p
0 16(//              #pragma omp critical)p
0 17(//              { div_count++; })p
0 19(                if\( UniformRandom\(\) <= parameters.doubles\( "differentiation_prob)p
0 20(ability" \) \))p
0 21(                {)p
0 22(//                      #pragma omp critical)p
0 23(//                      { diff_count++; })p
0 24(                        pCell->convert_to_cell_definition\( DCC \);)p
0 25(                })p
0 27(        })p
0 29(        return;)p
0 30(})p
0 32(void dummy_function\( Cell* pCell , Phenotype& phenotype , double dt \))p
0 33({)p
0 34(        // std::cout << phenotype.cycle.data.transition_rate\(0,0\) << std::endl;)p
0 35(})p
0 37(void create_cell_types\( void \))p
0 38({)p
0 39(        // use the same random seed so that future experiments have the)p
0 40(        // same initial histogram of oncoprotein, even if threading means)p
0 41(        // that future division and other events are still not identical)p
0 42(        // for all runs)p
0 44(        SeedRandom\( parameters.ints\("random_seed"\) \); // or specify a seed here)p
0 46(        // housekeeping)p
0 48(        initialize_default_cell_definition\(\);)p
0 49(        cell_defaults.phenotype.secretion.sync_to_microenvironment\( &microenviro)p
0 50(nment \);)p
0 52(        // Name the default cell type)p
0 54(        cell_defaults.type = 0;)p
0 55(        cell_defaults.name = "tumor cell";)p
0 57(        // set default cell cycle model)p
0 59(        live.phase_link\(0,0\).fixed_duration = parameters.bools\("fixed_cycle_dura)p
0 60(tion"\);)p
0 61(        cell_defaults.functions.cycle_model = live;)p
0 63(        // set default_cell_functions;)p
1 0(        cell_defaults.functions.update_phenotype = NULL;)p
1 2(        // needed for a 2-D simulation:)p
1 4(        /* grab code from heterogeneity */)p
1 6(        cell_defaults.functions.set_orientation = up_orientation;)p
1 7(        cell_defaults.phenotype.geometry.polarity = 1.0;)p
1 8(        cell_defaults.phenotype.motility.restrict_to_2D = true;)p
1 10(        // make sure the defaults are self-consistent.)p
1 12(        cell_defaults.phenotype.secretion.sync_to_microenvironment\( &microenviro)p
1 13(nment \);)p
1 14(        cell_defaults.phenotype.sync_to_functions\( cell_defaults.functions \);)p
1 16(        // set the rate terms in the default phenotype)p
1 18(        // first find index for a few key variables.)p
1 19(        int apoptosis_model_index = cell_defaults.phenotype.death.find_death_mod)p
1 20(el_index\( "Apoptosis" \);)p
1 21(        int necrosis_model_index = cell_defaults.phenotype.death.find_death_mode)p
1 22(l_index\( "Necrosis" \);)p
1 23(        int oxygen_substrate_index = microenvironment.find_density_index\( "oxyge)p
1 24(n" \);)p
1 26(        int G0G1_index = flow_cytometry_separated_cycle_model.find_phase_index\()p
1 27(PhysiCell_constants::G0G1_phase \);)p
1 28(        int S_index = flow_cytometry_separated_cycle_model.find_phase_index\( Phy)p
1 29(siCell_constants::S_phase \);)p
1 30(        int live_index = live.find_phase_index\( PhysiCell_constants::live \);)p
1 32(        // initially no necrosis)p
1 33(        cell_defaults.phenotype.death.rates[necrosis_model_index] = 0.0;)p
1 35(        // initially no apoptosis)p
1 36(        cell_defaults.phenotype.death.rates[apoptosis_model_index] = 0.0;)p
1 38(        // set oxygen uptake / secretion parameters for the default cell type)p
1 39(        cell_defaults.phenotype.secretion.uptake_rates[oxygen_substrate_index] =)p
1 40( 10;)p
1 41(        cell_defaults.phenotype.secretion.secretion_rates[oxygen_substrate_index)p
1 42(] = 0;)p
1 43(        cell_defaults.phenotype.secretion.saturation_densities[oxygen_substrate_)p
1 44(index] = 38;)p
1 46(        // add custom data here, if any)p
1 49(        // Now, let's define another cell type.)p
1 50(        // It's best to just copy the default and modify it.)p
1 52(        // define CSC type)p
1 54(        CSC = cell_defaults;)p
1 55(        CSC.type = 1;)p
1 56(        // set birth rate)p
1 57(        CSC.phenotype.cycle.data.transition_rate\(live_index,live_index\) =)p
1 58(                parameters.doubles\( "CSC_birth_rate" \);)p
1 59(        // set death rate)p
1 60(        CSC.phenotype.death.rates[apoptosis_model_index] =)p
1 61(                parameters.doubles\( "CSC_apoptosis_rate" \);)p
1 62(        // set the phenotype function to non-NULL)p
1 63(        CSC.functions.update_phenotype = differentiation_function;)p
Endpage
%%Page 3 2
Startpage
(/Users/heiland/git/stem_cells/custom_modules/custom_paul.cpp      Fri Jan 17 13:31:06 2020
       2)H
0 0(        // define DCC type)p
0 2(        DCC = cell_defaults;)p
0 3(        DCC.type = 2;)p
0 4(        // set birth rate)p
0 5(        DCC.phenotype.cycle.data.transition_rate\(live_index,live_index\) =)p
0 6(                parameters.doubles\( "DCC_birth_rate" \);)p
0 7(        // set death rate)p
0 8(        DCC.phenotype.death.rates[apoptosis_model_index] =)p
0 9(                parameters.doubles\( "DCC_apoptosis_rate" \);)p
0 11(/*)p
0 12(        // make this cell type randomly motile, less adhesive, greater survival,)p
0 13(        // and less proliferative)p
0 15(        motile_cell = cell_defaults;)p
0 16(        motile_cell.type = 1;)p
0 17(        motile_cell.name = "motile tumor cell";)p
0 19(        // make sure the new cell type has its own reference phenotype)p
0 21(        motile_cell.parameters.pReference_live_phenotype = &\( motile_cell.phenot)p
0 22(ype \);)p
0 24(        // enable random motility)p
0 25(        motile_cell.phenotype.motility.is_motile = true;)p
0 26(        motile_cell.phenotype.motility.persistence_time = parameters.doubles\( "m)p
0 27(otile_cell_persistence_time" \); // 15.0;)p
0 28(        motile_cell.phenotype.motility.migration_speed = parameters.doubles\( "mo)p
0 29(tile_cell_migration_speed" \); // 0.25 micron/minute)p
0 30(        motile_cell.phenotype.motility.migration_bias = 0.0;// completely random)p
0 32(        // Set cell-cell adhesion to 5% of other cells)p
0 33(        motile_cell.phenotype.mechanics.cell_cell_adhesion_strength *= parameter)p
0 34(s.doubles\( "motile_cell_relative_adhesion" \); // 0.05;)p
0 36(        // Set apoptosis to zero)p
0 37(        motile_cell.phenotype.death.rates[apoptosis_model_index] = parameters.do)p
0 38(ubles\( "motile_cell_apoptosis_rate" \); // 0.0;)p
0 40(        // Set proliferation to 10% of other cells.)p
0 41(        // Alter the transition rate from G0G1 state to S state)p
0 42(        motile_cell.phenotype.cycle.data.transition_rate\(G0G1_index,S_index\) *=)p
0 43(                parameters.doubles\( "motile_cell_relative_cycle_entry_rate" \); /)p
0 44(/ 0.1;)p
0 45(*/)p
0 47(        return;)p
0 48(})p
0 50(void setup_microenvironment\( void \))p
0 51({)p
0 52(        // set domain parameters)p
0 54(/* now this is in XML)p
0 55(        default_microenvironment_options.X_range = {-1000, 1000};)p
0 56(        default_microenvironment_options.Y_range = {-1000, 1000};)p
0 57(        default_microenvironment_options.simulate_2D = true;)p
0 58(*/)p
0 60(        // make sure to override and go back to 2D)p
0 61(        if\( default_microenvironment_options.simulate_2D == false \))p
0 62(        {)p
0 63(                std::cout << "Warning: overriding XML config option and setting)p
0 64(to 2D!" << std::endl;)p
1 0(                default_microenvironment_options.simulate_2D = true;)p
1 1(        })p
1 3(/* now this is in XML)p
1 4(        // no gradients need for this example)p
1 6(        default_microenvironment_options.calculate_gradients = false;)p
1 8(        // set Dirichlet conditions)p
1 10(        default_microenvironment_options.outer_Dirichlet_conditions = true;)p
1 12(        // if there are more substrates, resize accordingly)p
1 13(        std::vector<double> bc_vector\( 1 , 38.0 \); // 5% o2)p
1 14(        default_microenvironment_options.Dirichlet_condition_vector = bc_vector;)p
1 16(        // set initial conditions)p
1 17(        default_microenvironment_options.initial_condition_vector = { 38.0 };)p
1 18(*/)p
1 20(        // put any custom code to set non-homogeneous initial conditions or)p
1 21(        // extra Dirichlet nodes here.)p
1 23(        // initialize BioFVM)p
1 25(        initialize_microenvironment\(\);)p
1 27(        return;)p
1 28(})p
1 30(void setup_tissue\( void \))p
1 31({)p
1 32(        // create some cells near the origin)p
1 34(        Cell* pC;)p
1 36(        double Lx = default_microenvironment_options.X_range[1] - default_microe)p
1 37(nvironment_options.X_range[0];)p
1 38(        double Ly = default_microenvironment_options.Y_range[1] - default_microe)p
1 39(nvironment_options.Y_range[0];)p
1 41(        for\( int n = 0 ; n < parameters.ints\( "number_of_stem_cells" \) ; n++ \))p
1 42(        {)p
1 43(                double x = default_microenvironment_options.X_range[0] + 0.1*Lx)p
1 44(+ 0.8*UniformRandom\(\)*Lx;)p
1 45(                double y = default_microenvironment_options.Y_range[0] + 0.1*Ly)p
1 46(+ 0.8*UniformRandom\(\)*Ly;)p
1 48(                pC = create_cell\( CSC \);)p
1 49(                pC->assign_position\( x,y, 0.0 \);)p
1 51(        })p
1 53(        for\( int n = 0 ; n < parameters.ints\( "number_of_differentiated_cells" \))p
1 54( ; n++ \))p
1 55(        {)p
1 56(                double x = default_microenvironment_options.X_range[0] + 0.1*Lx)p
1 57(+ 0.8*UniformRandom\(\)*Lx;)p
1 58(                double y = default_microenvironment_options.Y_range[0] + 0.1*Ly)p
1 59(+ 0.8*UniformRandom\(\)*Ly;)p
1 61(                pC = create_cell\( DCC \);)p
1 62(                pC->assign_position\( x,y, 0.0 \);)p
1 64(        })p
Endpage
%%Page 5 3
Startpage
(/Users/heiland/git/stem_cells/custom_modules/custom_paul.cpp      Fri Jan 17 13:31:06 2020
       3)H
0 1(        return;)p
0 2(})p
0 4(std::vector<std::string> my_coloring_function\( Cell* pCell \))p
0 5({)p
0 6(        // start with flow cytometry coloring)p
0 8(        std::vector<std::string> output = { "black", "black", "black", "black" })p
0 9( ; // simple_cell_coloring\(pCell\);)p
0 11(        if\( pCell->phenotype.death.dead == false && pCell->type == 1 \))p
0 12(        {)p
0 13(                 output[0] = "red";)p
0 14(                 output[2] = "red";)p
0 15(                 return output;)p
0 16(        })p
0 18(        if\( pCell->phenotype.death.dead == false && pCell->type == 2 \))p
0 19(        {)p
0 20(                 output[0] = "cyan";)p
0 21(                 output[2] = "cyan";)p
0 22(                 return output;)p
0 23(        })p
0 25(        if\( pCell->phenotype.death.dead == true \))p
0 26(        {)p
0 27(                 output[0] = "black";)p
0 28(                 output[2] = "black";)p
0 29(                 return output;)p
0 30(        })p
0 32(        return output;)p
0 33(})p
Endpage
%%Trailer
PSPend
